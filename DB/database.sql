-- TABLE CAR_OWNER

CREATE TABLE CAR_OWNER (
    OWNER_ID SERIAL PRIMARY KEY,
    OWNER_NAME VARCHAR(20),
    LOCALITY VARCHAR(20),
    PHONE_NO VARCHAR(10)
);

-- Car Table

CREATE TABLE CARS (
    RC_NO VARCHAR(10) PRIMARY KEY,
    OWNER_ID INT,
    MODEL VARCHAR(20)
);

-- Floors Table

CREATE TABLE FLOORS (
    FLOOR_NO INT PRIMARY KEY,
    AVAIL_SLTS INT
);

-- Park Table

CREATE TABLE PARK (
    TICKET_NO SERIAL PRIMARY KEY,
    RC_NO VARCHAR(10),
    FLOOR_NO INT,
    SLOT INT,
    HOURS TIME,
    TIME_IN TIME,
    TIME_OUT TIME,
    PARKING_CHRG INT,
    CONSTRAINT FK_RC_NO_CAR
        FOREIGN KEY (RC_NO) 
            REFERENCES CARS(RC_NO)
                ON DELETE CASCADE,
    CONSTRAINT FK_FLOOR_NO_FLOORS
        FOREIGN KEY (FLOOR_NO) 
            REFERENCES FLOORS(FLOOR_NO)
                ON DELETE CASCADE
);


-- Admin Table

CREATE VIEW Curr_cars_parked AS(
    SELECT TICKET_NO, RC_NO, FLOOR_NO, SLOT, TIME_IN 
    FROM PARK
    WHERE PARKING_CHRG = 0
);

-- Stored Procedure for decrementing available slots

CREATE OR REPLACE PROCEDURE decrement_slots(floor int)
LANGUAGE plpgsql
AS $$
BEGIN
UPDATE FLOORS SET AVAIL_SLTS = AVAIL_SLTS - 1 WHERE floor_no = floor;
END;$$;

--Trigger

CREATE OR REPLACE FUNCTION setHours()
RETURNS TRIGGER AS $$
BEGIN
UPDATE PARK SET HOURS = (TIME_OUT - TIME_IN) WHERE TICKET_NO = TICKET_NO;
RETURN NEW.HOURS;
END; 
$$ 
LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER setHours
AFTER UPDATE OF TIME_OUT ON PARK
FOR EACH ROW EXECUTE PROCEDURE setHours();
